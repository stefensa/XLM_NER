# Utilized for merging tags according to BPE result from character-level tags
__author__ = 'pengjie'


from tqdm import trange


def cut_tag_set(candidate):
    '''
    merge character-level tag set into BPE tag set
    '''
    result = []
    for i in candidate:
        if len(i) == 1:
            result.append(i[0])
        else:
            if 'O' in i:
                result.append('O')
            else:
                B_I = [tag[0] for tag in i]

                tag_name = [tag[2:] for tag in i]
                if tag_name == [tag_name[0]] * len(tag_name):
                    if 'B' not in B_I:
                        result.append('I-' + tag_name[0])
                    else:
                        result.append('B-' + tag_name[0])
                else:
                    result.append('O')

    return ' '.join(result)

def count_lines(file):
    count = 0
    with open(file, mode='r', encoding='UTF-8') as f:
        for _ in f:
            count += 1
    return count



def seg_label(sents, labels, output):
    count = count_lines(sents)
    error_lines = []
    r1 = open(sents, mode='r', encoding='UTF-8')
    r2 = open(labels, mode='r', encoding='UTF-8')
    with open(output, mode='w', encoding='UTF-8') as w:
        for index in trange(count):
            sent = next(r1)
            sent = sent.replace('  ', '& ').split()
            lengs = [len(word.replace('@@', '')) for word in sent]
            tag = next(r2)
            tags = tag.split()

            try:
                assert sum(lengs) == len(tags), 'BPE encoding result length is not equivalent to tag'
                candidate = []    # 存放 待合并的tag候选集
                for sub_token in lengs:
                    tag_set = tags[:sub_token]
                    candidate.append(tag_set)
                    for _ in range(sub_token):
                        tags.pop(0)
            except:
                error_lines.append(index + 1)
                continue

            assert len(sent) == len(candidate), 'length is not equivalent'
            result = cut_tag_set(candidate)
            w.write(result + '\n')
    r1.close()
    r2.close()
    return error_lines

def remove_(original, new):
    with open(original, mode='r', encoding='UTF-8') as r:
        with open(new, mode='w', encoding='UTF-8') as w:
            for index, line in enumerate(r):
                if index + 1 not in error_lines:
                    w.write(line)


def test_alignment(content, tag):
    count = count_lines(content)
    r1 = open(content, mode='r', encoding='UTF-8')
    r2 = open(tag, mode='r', encoding='UTF-8')
    for index in trange(count):
        sent = next(r1)
        sent = sent.replace('  ', '& ').split()
        tags = next(r2)
        tags = tags.split()
        if len(sent) != len(tags):
            print('line: ', index)
            return False

    r1.close()
    r2.close()
    return True


sents = '../model/dataset_seg/sent_bpe.txt'
labels = '../model/dataset_seg/tag_full.txt'
output = '../model/dataset_seg/tag_bpe.txt'
#
# errors = seg_label(sents, labels, output)
# print('error lines: \n', errors)
# print('lengths:', len(errors))
#___________________________________________________________

error_lines = [9, 12, 30, 33, 38, 40, 45, 48, 53, 57, 58, 66, 68, 72, 79, 82, 86, 93, 96, 98, 102, 103, 114, 118, 121, 122, 123, 128, 133, 135, 139, 146, 155, 160, 187, 188, 189, 192, 200, 211, 214, 221, 224, 225, 229, 239, 241, 247, 249, 264, 266, 268, 270, 271, 289, 291, 314, 318, 320, 327, 331, 332, 337, 343, 344, 364, 381, 385, 391, 397, 404, 408, 409, 417, 418, 419, 422, 423, 431, 441, 460, 462, 473, 484, 485, 495, 517, 520, 528, 539, 547, 554, 564, 583, 586, 592, 595, 603, 605, 637, 644, 646, 647, 650, 651, 657, 687, 699, 704, 708, 713, 719, 725, 730, 740, 742, 753, 761, 767, 773, 779, 792, 799, 800, 803, 812, 816, 837, 839, 841, 850, 854, 856, 858, 864, 876, 883, 892, 897, 899, 904, 906, 909, 917, 921, 949, 954, 966, 968, 972, 980, 983, 984, 989, 992, 1010, 1011, 1012, 1020, 1024, 1036, 1039, 1043, 1047, 1066, 1077, 1078, 1088, 1089, 1091, 1099, 1100, 1103, 1111, 1115, 1127, 1128, 1132, 1138, 1145, 1148, 1150, 1151, 1154, 1157, 1158, 1162, 1165, 1181, 1184, 1190, 1191, 1202, 1205, 1206, 1208, 1225, 1232, 1238, 1243, 1246, 1260, 1263, 1264, 1273, 1279, 1295, 1319, 1321, 1344, 1361, 1366, 1373, 1380, 1384, 1387, 1389, 1393, 1401, 1404, 1418, 1438, 1440, 1444, 1461, 1464, 1467, 1469, 1474, 1480, 1485, 1487, 1496, 1504, 1511, 1539, 1543, 1544, 1549, 1560, 1563, 1567, 1571, 1576, 1580, 1581, 1597, 1608, 1610, 1611, 1630, 1631, 1639, 1640, 1647, 1656, 1658, 1664, 1666, 1693, 1696, 1705, 1709, 1711, 1737, 1743, 1747, 1749, 1756, 1761, 1766, 1769, 1774, 1781, 1783, 1786, 1789, 1797, 1803, 1806, 1808, 1825, 1827, 1829, 1841, 1850, 1852, 1853, 1860, 1866, 1870, 1879, 1881, 1885, 1887, 1914, 1918, 1922, 1929, 1932, 1933, 1936, 1940, 1950, 1955, 1957, 1967, 1972, 1973, 1987, 1990, 1991, 1995, 2009, 2010, 2011, 2014, 2020, 2032, 2037, 2041, 2042, 2047, 2056, 2057, 2068, 2072, 2074, 2080, 2087, 2089, 2093, 2095, 2097, 2098, 2099, 2101, 2104, 2127, 2136, 2146, 2151, 2154, 2156, 2167, 2183, 2187, 2194, 2199, 2204, 2221, 2222, 2225, 2226, 2253, 2257, 2267, 2272, 2275, 2289, 2291, 2299, 2300, 2305, 2314, 2316, 2323, 2330, 2338, 2342, 2347, 2349, 2376, 2417, 2427, 2428, 2446, 2477, 2488, 2494, 2497, 2502, 2503, 2507, 2517, 2534, 2543, 2545, 2552, 2556, 2560, 2576, 2588, 2617, 2620, 2622, 2625, 2626, 2628, 2629, 2643, 2649, 2650, 2660, 2676, 2680, 2689, 2703, 2706, 2707, 2714, 2716, 2722, 2728, 2729, 2731, 2742, 2743, 2755, 2762, 2763, 2764, 2766, 2769, 2770, 2771, 2778, 2780, 2786, 2798, 2801, 2802, 2807, 2809, 2819, 2822, 2823, 2832, 2840, 2845, 2858, 2864, 2865, 2871, 2888, 2899, 2901, 2903, 2905, 2919, 2928, 2929, 2936, 2941, 2945, 2946, 2947, 2961, 2980, 2981, 2985, 2986, 2987, 3018, 3019, 3039, 3043, 3054, 3055, 3064, 3065, 3082, 3113, 3146, 3151, 3153, 3172, 3176, 3181, 3185, 3187, 3197, 3227, 3232, 3236, 3244, 3262, 3266, 3270, 3273, 3276, 3281, 3316, 3352, 3355, 3398, 3412, 3416, 3423, 3437, 3454, 3461, 3469, 3497, 3510, 3517, 3529, 3543, 3546, 3557, 3558, 3563, 3577, 3591, 3594, 3611, 3616, 3657, 3668, 3678, 3697, 3733, 3756, 3778, 3797, 3798, 3799, 3812, 3826, 3842, 3844, 3849, 3863, 3893, 3975, 3981, 3986, 3990, 4009, 4035, 4039, 4047, 4056, 4062, 4066, 4099, 4111, 4123, 4126, 4140, 4141, 4160, 4163, 4183, 4185, 4186, 4189, 4201, 4206, 4209, 4212, 4221, 4222, 4224, 4225, 4240, 4257, 4258, 4259, 4263, 4306, 4311, 4312, 4324, 4330, 4350, 4364, 4369, 4379, 4383, 4388, 4390, 4393, 4398, 4404, 4412, 4413, 4415, 4418, 4422, 4425, 4426, 4432, 4455, 4457, 4458, 4464, 4473, 4491, 4495, 4519, 4527, 4536, 4541, 4559, 4566, 4575, 4576, 4584, 4590, 4604, 4612, 4613, 4615, 4618, 4628, 4633, 4638, 4640, 4645, 4648, 4650, 4657, 4659, 4667, 4672, 4683, 4684, 4685, 4690, 4693, 4701, 4704, 4718, 4722, 4728, 4734, 4737, 4758, 4760, 4780, 4787, 4792, 4802, 4807, 4809, 4811, 4813, 4814, 4818, 4824, 4860, 4875, 4880, 4906, 4913, 4925, 4936, 4955, 4959, 4962, 4968, 4969, 4992, 4993, 5001, 5002, 5033, 5035, 5043, 5053, 5066, 5101, 5104, 5113, 5120, 5139, 5141, 5155, 5170, 5176, 5178, 5180, 5183, 5195, 5199, 5209, 5216, 5225, 5230, 5233, 5234, 5255, 5256, 5258, 5262, 5263, 5269, 5287, 5294, 5300, 5307, 5309, 5316, 5322, 5337, 5343, 5356, 5357, 5363, 5365, 5373, 5378, 5392, 5394, 5411, 5414, 5432, 5436, 5447, 5448, 5458, 5464, 5467, 5479, 5492, 5505, 5506, 5518, 5519, 5528, 5533, 5548, 5555, 5561, 5572, 5584, 5588, 5603, 5613, 5630, 5637, 5638, 5646, 5650, 5651, 5658, 5676, 5678, 5698, 5723, 5726, 5728, 5739, 5751, 5762, 5768, 5775, 5786, 5791, 5799, 5800, 5802, 5822, 5829, 5830, 5832, 5848, 5849, 5850, 5852, 5864, 5892, 5901, 5907, 5917, 5923, 5927, 5928, 5932, 5940, 5956, 5977, 6014, 6021, 6026, 6036, 6040, 6049, 6054, 6076, 6087, 6092, 6101, 6104, 6121, 6124, 6139, 6143, 6147, 6163, 6172, 6207, 6210, 6215, 6216, 6225, 6232, 6234, 6241, 6245, 6261, 6280, 6293, 6298, 6301, 6302, 6303, 6308, 6313, 6320, 6331, 6334, 6338, 6348, 6354, 6365, 6385, 6387, 6394, 6418, 6422, 6436, 6446, 6449, 6461, 6462, 6465, 6471, 6484, 6493, 6500, 6510, 6511, 6517, 6530, 6537, 6554, 6557, 6560, 6565, 6569, 6575, 6583, 6591, 6600, 6609, 6617, 6618, 6623, 6631, 6637, 6640, 6651, 6654, 6656, 6657, 6687, 6702, 6710, 6714, 6721, 6728, 6743, 6747, 6750, 6755, 6760, 6762, 6763, 6768, 6770, 6775, 6790, 6796, 6803, 6818, 6824, 6831, 6835, 6841, 6849, 6859, 6863, 6868, 6879, 6883, 6884, 6914, 6932, 6944, 6953, 6957, 6963, 6983, 6993, 6996, 6998, 7008, 7009, 7010, 7014, 7017, 7098, 7106, 7140, 7143, 7167, 7171, 7186, 7217, 7221, 7232, 7249, 7252, 7259, 7271, 7281, 7288, 7302, 7306, 7309, 7319, 7337, 7354, 7359, 7363, 7376, 7386, 7391, 7397, 7408, 7431, 7441, 7446, 7451, 7485, 7493, 7494, 7502, 7514, 7523, 7549, 7556, 7575, 7581, 7596, 7608, 7612, 7630, 7644, 7657, 7666, 7680, 7685, 7692, 7698, 7700, 7702, 7704, 7713]
orig = '../model/dataset_seg/sent_bpe.txt'
new = '../model/dataset_seg/remove_bpe.txt'
# remove_(orig, new)
#___________________________________________________________

align = test_alignment(new, output)
print(align)
